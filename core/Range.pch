// @v 1.2.0
// @n Motus_Lib
// @a Armin Hamar
// @l https://www.binpress.com/license/view/l/dc100faf74fa8ba3d613f8255ae1ef73
#pragma once

// @t i64 64bit type
using i64 = long long;

// @s represents the range in memmory
template<typename T>
struct Range_info
{
    i64 size; 
    T *begin;
};

template <typename T>
class Range {
    Range_info<T> info;
public:
    Range(T* begin,i64&& size)
    {
        info = Range_info<T>();
        info.begin = begin;
        info.size = size;
    }
    
    Range(T* begin,i64& size)
    {
        info = Range_info<T>();
        info.begin = begin;
        info.size = size;
    }
    
    Range(T* begin,T* end)
    {
        info = Range_info<T>();
        info.begin = begin;
        info.size = (i64)(end - begin);
    }
    
    inline bool is_elment_valid_at(i64 position)
    {
        if(!( (info.begin + position) >= (info.begin + info.size) )) return true;
        return false;
    }
    
    inline void move_forward(i64& by_elements)
    {
        if(is_elment_valid_at(by_elements))
        {
            info.begin += by_elements;
            info.size  -= by_elements;
        }
    }
    
    inline void move_forward(i64&& by_elements)
    {
        if(is_elment_valid_at(by_elements))
        {
            info.begin += by_elements;
            info.size  -= by_elements;
        }
    }
    
    inline T get_at(i64& position)
    {
        return *(info.begin + position);
    }
    
    inline T get_at(i64&& position)
    {
        return *(info.begin + position);
    }
    
    inline T get()
    {
        return *info.begin;
    }
    
    inline T get_next()
    {
        move_forward(1);
        return get();
    }
    
    inline Range<T> subrange(i64 offset_begin,i64 offset_end)
    {
        if(offset_end >= info.size)
            return Range<T>((info.begin+offset_begin),info.size);
        
        return Range<T>((info.begin+offset_begin),offset_end);
    }
    
    inline T peek()
    {
        if(is_elment_valid_at(1))
            return get_at(1);
        
        return get();
    }
    
    T* begin()
    {
        return info.begin;
    }
    
    T* end()
    {
        return info.begin + info.size;
    }
};
